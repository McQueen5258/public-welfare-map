{"version":3,"sources":["components/Card.js","components/ChinaMap.js"],"names":["useStyles","makeStyles","theme","root","position","width","height","backgroundColor","boxShadow","display","flexDirection","userSelect","transition","cardContent","justifyContent","alignItems","cardImg","backgroundSize","backgroundPosition","backgroundRepeat","text","margin","founder","color","placeName","Card","card","classes","properties","vision","logo","province","city","Fade","in","visibility","timeout","className","style","top","left","backgroundImage","ChinaMap","useState","district","village","street","detailed","setCard","locking","d3Map","useRef","useEffect","SIZE","right","bottom","g","select","current","append","attr","projection","geoMercator","center","scale","translate","path","schemeCategory10","geoPath","spot","a","places","json","console","error","selectAll","data","points","enter","d","peking","geometry","coordinates","on","e","pageY","pageX","Maps","map1","map2","map3","features","name","draw","id","ref","viewBox"],"mappings":"uNAIMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,WACVC,MAAO,QACPC,OAAQ,QACRC,gBAAiB,QACjBC,UAAW,oCACXC,QAAS,OACTC,cAAe,MACfC,WAAY,OACZC,WAAY,UAEdC,YAAa,CACXP,OAAQ,OACRD,MAAO,MACPI,QAAS,OACTC,cAAe,SACfI,eAAgB,SAChBC,WAAY,UAEdC,QAAS,CACPV,OAAQ,OACRD,MAAO,MAEPY,eAAgB,MAChBC,mBAAoB,SACpBC,iBAAkB,aAEpBC,KAAM,CACJC,OAAQ,KAEVC,QAAS,CACPC,MAAO,oBAETC,UAAW,CACTD,MAAO,wBAiCIE,MA7Bf,YAAyB,IAATC,EAAQ,EAARA,KACRC,EAAU3B,IAChB,EAA4C0B,EAAKE,WAAzCN,EAAR,EAAQA,QAASlB,EAAjB,EAAiBA,SAAUyB,EAA3B,EAA2BA,OAAQC,EAAnC,EAAmCA,KAC3BC,EAAmB3B,EAAnB2B,SAAUC,EAAS5B,EAAT4B,KAClB,OACE,cAACC,EAAA,EAAD,CAAMC,GAAIR,EAAKS,WAAYC,QAAS,IAApC,SACE,sBACEC,UAAWV,EAAQxB,KACnBmC,MAAO,CACLC,IAAKb,EAAKa,IAAM,KAChBC,KAAMd,EAAKc,KAAO,MAJtB,UAOE,sBAAKH,UAAWV,EAAQd,YAAxB,UACE,oBAAIwB,UAAWV,EAAQP,KAAvB,SAA8BS,IAC9B,oBAAGQ,UAAWV,EAAQP,KAAtB,UACE,sBAAMiB,UAAWV,EAAQL,QAAzB,SAAmCA,IACnC,uBAAMe,UAAWV,EAAQH,UAAzB,eAAuCO,EAAUC,WAGrD,qBACEK,UAAWV,EAAQX,QACnBsB,MAAO,CAAEG,gBAAiB,OAASX,EAAO,aC8GrCY,UAlKf,WACE,MAAwBC,mBAAS,CAC/BR,YAAY,EACZI,IAAK,IACLC,KAAM,IACNZ,WAAY,CACVC,OAAQ,GACRP,QAAS,GACTQ,KAAM,GACN1B,SAAU,CACR2B,SAAU,GACVC,KAAM,GACNY,SAAU,GACVC,QAAS,GACTC,OAAQ,GACRC,SAAU,OAdhB,mBAAOrB,EAAP,KAAasB,EAAb,KAkBA,EAA8BL,oBAAS,GAAvC,mBAAOM,EAAP,KACMC,GADN,KACcC,oBA6Gd,OA3GAC,qBAAU,WAGR,IAAMC,EACG,KADHA,EAEI,IAFJA,EAGI,CACNd,IAAK,GACLe,MAAO,GACPC,OAAQ,GACRf,KAAM,IAKJgB,EAFMC,YAAOP,EAAMQ,SAGtBC,OAAO,KACPC,KAAK,YAFE,oBAEwBP,EAAYd,IAFpC,aAE4Cc,EAAYb,KAFxD,MAKJqB,EAAaC,cAChBC,OAAO,CAAC,IAAK,KACbC,MAAM,KACNC,UAAU,CAACZ,EAAa,EAAGA,EAAc,IAItCa,GAFQC,IAEDC,cAAUP,WAAWA,IA3BpB,4CA8Bd,mBA6BiBQ,EA7BjB,WAAAC,EAAA,iGAAAA,EAAA,MA6BE,4BAAAA,EAAA,6DAEMC,EAAS,GAFf,kBAKmBC,YAAK,gDALxB,OAKID,EALJ,gFAQWE,QAAQC,MAAR,OARX,QAaElB,EAAEmB,UAAU,UACTC,KAAKL,EAAOM,QACZC,QACAnB,OAAO,UACPC,KAAK,MAAM,SAACmB,GACX,IAAIC,EAASD,EAAEE,SAASC,YAExB,OADgBrB,EAAWmB,GACV,MAElBpB,KAAK,MAAM,SAACmB,GACX,IAAIC,EAASD,EAAEE,SAASC,YAExB,OADgBrB,EAAWmB,GACV,MAElBpB,KAAK,OAAQ,QACbA,KAAK,QAAS,SACdA,KAAK,IAAK,GACVA,KAAK,IAAKM,GACViB,GAAG,aAAa,SAAUC,EAAGL,GAC5B,OAAO/B,EAAQ,2BACVtB,GADS,IAEZS,YAAY,EACZI,IAAK6C,EAAEC,MAAQ,EACf7C,KAAM4C,EAAEE,MAAQ,EAChB1D,WAAYmD,EAAEnD,iBAGjBuD,GAAG,YAAY,SAAUC,EAAGL,GAC3B,OAAO/B,EAAQ,2BAAKtB,GAAN,IAAYS,YAAY,QAzC5C,0DA7BF,uBA6BiBkC,EA7BjB,2CAEQkB,EAAO,GAFf,kBAKsBf,YAAK,2BAL3B,cAKIe,EAAKC,KALT,gBAMsBhB,YAAK,sBAN3B,cAMIe,EAAKE,KANT,iBAOsBjB,YAAK,+BAP3B,QAOIe,EAAKG,KAPT,kFAUWjB,QAAQC,MAAR,OAVX,QAeElB,EAAEmB,UAAU,KACTC,KAAKW,EAAKC,KAAKG,UACfb,QACAnB,OAAO,KACPA,OAAO,QACPC,KAAK,IAAKM,GACVN,KAAK,SAAU,WACfA,KAAK,eAAgB,GAErBA,KAAK,OAAQ,SACbD,OAAO,SACPvC,MAAK,SAAC2D,GAAD,OAAOA,EAAEnD,WAAWgE,QA+C5BvB,IAzEF,2DA9Bc,0DAyGdwB,KACC,CAAC5C,IAEF,sBAAK6C,GAAG,MAAR,UACE,cAAC,EAAD,CAAMpE,KAAMA,IACZ,qBAAKqE,IAAK7C,EAAO8C,QAAO","file":"static/js/6.8d4edc9f.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Fade from \"@material-ui/core/Fade\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"absolute\",\n    width: \"400px\",\n    height: \"130px\",\n    backgroundColor: \"white\",\n    boxShadow: \"0 10px 25px rgba(92, 99, 105, .2)\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    userSelect: \"none\",\n    transition: \"all 1s\",\n  },\n  cardContent: {\n    height: \"100%\",\n    width: \"70%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  cardImg: {\n    height: \"100%\",\n    width: \"30%\",\n    // backgroundImage: \"url(Images/Kido/Logo/Kido.png)\",\n    backgroundSize: \"70%\",\n    backgroundPosition: \"center\",\n    backgroundRepeat: \"no-repeat\",\n  },\n  text: {\n    margin: \"0\",\n  },\n  founder: {\n    color: \"rgb(165, 36, 56)\",\n  },\n  placeName: {\n    color: \"rgb(87, 91, 102)\",\n  },\n}));\n\nfunction Card({ card }) {\n  const classes = useStyles();\n  const { founder, position, vision, logo } = card.properties;\n  const { province, city } = position;\n  return (\n    <Fade in={card.visibility} timeout={1000}>\n      <div\n        className={classes.root}\n        style={{\n          top: card.top + \"px\",\n          left: card.left + \"px\",\n        }}\n      >\n        <div className={classes.cardContent}>\n          <h2 className={classes.text}>{vision}</h2>\n          <p className={classes.text}>\n            <span className={classes.founder}>{founder}</span>\n            <span className={classes.placeName}>, {province}{city}</span>\n          </p>\n        </div>\n        <div \n          className={classes.cardImg}\n          style={{ backgroundImage: 'url(' + logo + ')'}}\n        ></div>\n      </div>\n    </Fade>\n  );\n}\n\nexport default Card;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { select, geoMercator, schemeCategory10, geoPath, json } from \"d3\";\nimport * as topojson from \"topojson\";\nimport Card from \"./Card\";\n/*\n * // TODO 可添加坐标 √\n * // TODO 地图剧中 √\n * // TODO 响应式 √\n * // TODO 设置颜色 √(后续改更好看的)\n * // TODO 坐标样式\n * // TODO 限制地图的大小\n * // TODO 使用TopoJson修复GeoJson的问题\n */\nfunction ChinaMap() {\n  const [card, setCard] = useState({\n    visibility: false,\n    top: \"0\",\n    left: \"0\",\n    properties: {\n      vision: \"\",\n      founder: \"\",\n      logo: \"\",\n      position: {\n        province: \"\",\n        city: \"\",\n        district: \"\",\n        village: \"\",\n        street: \"\",\n        detailed: \"\",\n      },\n    },\n  });\n  const [locking, setLocking] = useState(false);\n  const d3Map = useRef();\n\n  useEffect(() => {\n    /***** 1.初始化 *****/\n    // 画板大小\n    const SIZE = {\n      width: 1200,\n      height: 1000,\n      margin: {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10,\n      },\n    };\n    const svg = select(d3Map.current);\n\n    const g = svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(${SIZE.margin.top}, ${SIZE.margin.left})`);\n\n    // 黑板(投影方式)\n    const projection = geoMercator()\n      .center([107, 31])\n      .scale(900)\n      .translate([SIZE.width / 2, SIZE.height / 2]);\n    // 颜色(暂时使用这个颜色)\n    const color = schemeCategory10;\n    // 地理路径生成器\n    const path = geoPath().projection(projection);\n\n    /***** 2.画地图 *****/\n    async function draw() {\n      /***** 1.引入中国地图数据 *****/\n      const Maps = {};\n      try {\n        // do something\n        Maps.map1 = await json(\"/Map/ChinaData.geo.json\");\n        Maps.map2 = await json(\"/Map/data.ali.json\"); // ? 无法兼容我的代码\n        Maps.map3 = await json(\"/Map/data.jiangshukeji.json\"); // ? 无法兼容我的代码\n      } catch (err) {\n        // do something\n        return console.error(err);\n      }\n\n      /***** 2.将地图投射到页面上 *****/\n      // 1.显示地图表面\n      g.selectAll(\"g\")\n        .data(Maps.map1.features)\n        .enter()\n        .append(\"g\")\n        .append(\"path\")\n        .attr(\"d\", path)\n        .attr(\"stroke\", \"#d8d7d7\")\n        .attr(\"stroke-width\", 1)\n        // .attr(\"opacity\", 0.6)\n        .attr(\"fill\", \"white\")\n        .append(\"title\")\n        .text((d) => d.properties.name);\n\n      /***** 3.标坐标(place) *****/\n      async function spot() {\n        /***** 1.引入公益坐标(places) *****/\n        let places = {};\n        try {\n          // do something\n          places = await json(\"/Data/PublicWelfareCoordinates/data.geo.json\");\n        } catch (err) {\n          // do something\n          return console.error(err);\n        }\n\n        /***** 2.将公益地点添加到地图上 *****/\n\n        g.selectAll(\"circle\")\n          .data(places.points)\n          .enter()\n          .append(\"circle\")\n          .attr(\"cx\", (d) => {\n            let peking = d.geometry.coordinates;\n            let proPeking = projection(peking);\n            return proPeking[0];\n          })\n          .attr(\"cy\", (d) => {\n            let peking = d.geometry.coordinates;\n            let proPeking = projection(peking);\n            return proPeking[1];\n          })\n          .attr(\"fill\", \"blue\")\n          .attr(\"class\", \"point\")\n          .attr(\"r\", 6)\n          .attr(\"d\", path)\n          .on(\"mouseover\", function (e, d) {\n            return setCard({\n              ...card,\n              visibility: true,\n              top: e.pageY + 8,\n              left: e.pageX + 3,\n              properties: d.properties,\n            });\n          })\n          .on(\"mouseout\", function (e, d) {\n            return setCard({ ...card, visibility: false });\n          });\n      }\n      spot();\n    }\n    draw();\n  }, [locking]);\n  return (\n    <div id=\"map\">\n      <Card card={card} />\n      <svg ref={d3Map} viewBox={`0 0 1200 1000`}>\n        {/* \n          // TODO 之后可能需要用的坐标(icon)\n        */}\n        {/* <svg\n          t=\"1633709593797\"\n          class=\"icon\"\n          viewBox=\"0 0 1024 1024\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          p-id=\"3252\"\n          width=\"200\"\n          height=\"200\"\n        >\n          <path\n            d=\"M518.4 48c-214.4 0-390.4 176-390.4 393.6 0 48 16 99.2 41.6 156.8 28.8 57.6 70.4 118.4 118.4 182.4 35.2 41.6 73.6 83.2 108.8 121.6 12.8 12.8 25.6 25.6 35.2 35.2 6.4 6.4 12.8 9.6 12.8 12.8l0 0c38.4 38.4 102.4 38.4 137.6 0 3.2-3.2 6.4-6.4 12.8-12.8 9.6-9.6 22.4-22.4 35.2-35.2 38.4-38.4 73.6-80 108.8-121.6 51.2-60.8 92.8-124.8 118.4-182.4 28.8-57.6 41.6-108.8 41.6-156.8C908.8 224 732.8 48 518.4 48zM822.4 576c-25.6 54.4-64 112-115.2 172.8-35.2 41.6-70.4 83.2-105.6 118.4-12.8 12.8-25.6 25.6-35.2 35.2-6.4 6.4-9.6 9.6-12.8 12.8-19.2 19.2-51.2 19.2-70.4 0l0 0c-3.2-3.2-6.4-6.4-12.8-12.8-9.6-9.6-22.4-22.4-35.2-35.2-35.2-38.4-73.6-76.8-105.6-118.4-48-60.8-86.4-118.4-115.2-172.8-25.6-51.2-38.4-96-38.4-134.4 0-192 153.6-345.6 342.4-345.6 188.8 0 342.4 153.6 342.4 345.6C860.8 480 848 524.8 822.4 576z\"\n            p-id=\"3253\"\n            fill=\"#8a8a8a\"\n          ></path>\n          <path\n            d=\"M518.4 262.4c-96 0-169.6 76.8-169.6 172.8 0 96 76.8 172.8 169.6 172.8s169.6-76.8 169.6-172.8C688 339.2 614.4 262.4 518.4 262.4zM518.4 556.8c-67.2 0-121.6-54.4-121.6-124.8s54.4-124.8 121.6-124.8c67.2 0 121.6 54.4 121.6 124.8S585.6 556.8 518.4 556.8z\"\n            p-id=\"3254\"\n            fill=\"#8a8a8a\"\n          ></path> */}\n        {/* </svg> */}\n      </svg>\n    </div>\n  );\n}\n\nexport default ChinaMap;\n"],"sourceRoot":""}