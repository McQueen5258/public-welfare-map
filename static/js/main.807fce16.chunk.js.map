{"version":3,"sources":["redux/slices/publicWelfare.js","redux/slices/ChinaMap.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["slice","createSlice","name","initialState","error","isLoading","publicWelfare","publicWelfareData","reducers","startLoading","state","hasError","action","payload","getPublicWelfareSuccess","actions","getPublicWelfareData","dispatch","a","axios","get","response","data","points","message","type","ChinaMapData","getChinaMapSuccess","features","getChinaMapData","rootPersistConfig","key","storage","keyPrefix","whitelist","appReducer","combineReducers","publicWelfareReducer","ChinaMap","ChinaMapReducer","store","configureStore","reducer","persistReducer","removeItem","undefined","middleware","getDefaultMiddleware","serializableCheck","immutableCheck","persistor","persistStore","App","lazy","ReactDOM","render","loading","fallback","document","getElementById"],"mappings":"6MAWMA,EAAQC,YAAY,CACxBC,KAAM,gBACNC,aATmB,CACnBC,MAAO,GACPC,WAAW,EACXC,cAAe,KACfC,kBAAmB,IAMnBC,SAAU,CACRC,aADQ,SACKC,GACXA,EAAML,WAAY,GAGpBM,SALQ,SAKCD,EAAOE,GACdF,EAAML,WAAY,EAClBK,EAAMN,MAAQQ,EAAOC,SAGvBC,wBAVQ,SAUgBJ,EAAOE,GAC7BF,EAAML,WAAY,EAClBK,EAAMH,kBAAoBK,EAAOC,YAMxBb,MAAf,QAG4BA,EAAMe,QAAnBJ,SAIR,SAASK,IACd,8CAAO,WAAOC,GAAP,eAAAC,EAAA,6DACLD,EAASjB,EAAMe,QAAQN,gBADlB,kBAGoBU,IAAMC,IAAI,gDAH9B,OAGGC,EAHH,OAIHJ,EAASjB,EAAMe,QAAQD,wBAAwBO,EAASC,KAAKC,SAJ1D,gDAMHN,EAASjB,EAAMe,QAAQJ,SAAS,KAAMa,UANnC,yDAAP,wD,sHC/BIxB,EAAQC,YAAY,CACxBC,KAAM,WACNC,aATmB,CACnBC,MAAO,GACPC,WAAW,EACXoB,KAAM,KACNC,aAAc,IAMdlB,SAAU,CACRC,aADQ,SACKC,GACXA,EAAML,WAAY,GAGpBM,SALQ,SAKCD,EAAOE,GACdF,EAAML,WAAY,EAClBK,EAAMN,MAAQQ,EAAOC,SAGvBc,mBAVQ,SAUWjB,EAAOE,GACxBF,EAAML,WAAY,EAClBK,EAAMgB,aAAed,EAAOC,QAAQe,SACpClB,EAAMe,KAAOb,EAAOC,QAAQY,SAMnBzB,MAAf,QAG4BA,EAAMe,QAAnBJ,SAIR,SAASkB,IACd,8CAAO,WAAOZ,GAAP,eAAAC,EAAA,6DACLD,EAASjB,EAAMe,QAAQN,gBADlB,kBAGoBU,IAAMC,IAAI,2BAH9B,OAGGC,EAHH,OAIHJ,EAASjB,EAAMe,QAAQY,mBAAmBN,EAASC,OAJhD,gDAMHL,EAASjB,EAAMe,QAAQJ,SAAS,KAAMa,UANnC,yDAAP,wD,iIC/BIM,EAAoB,CACxBC,IAAK,OACLC,QAASA,IACTC,UAAW,SACXC,UAAW,CAAC,aAURC,EAAaC,YAAgB,CACjC9B,cAAe+B,IACfC,SAAUC,MCpBNC,EAAQC,YAAe,CAC3BC,QAASC,YAAeb,GDuBN,SAACpB,EAAOE,GAC1B,MAAoB,0BAAhBA,EAAOa,MACTO,IAAQY,WAAW,gBACZT,OAAWU,EAAWjC,IAExBuB,EAAWzB,EAAOE,MC3BzBkC,WAAYC,YAAqB,CAC/BC,mBAAmB,EACnBC,gBAAgB,MAIdC,EAAYC,YAAaX,G,eCPzBY,EAAMC,gBAAK,kBAAM,wDAEvBC,IAASC,OAEP,cAAC,IAAD,CAAUf,MAAOA,EAAjB,SACE,cAAC,cAAD,CAAagB,QAAS,wBAAaN,UAAWA,EAA9C,SACE,cAAC,WAAD,CAAUO,SAAU,wBAApB,SACE,cAACL,EAAD,UAKNM,SAASC,eAAe,W","file":"static/js/main.807fce16.chunk.js","sourcesContent":["import axios from 'axios';\n// import { filter, map } from 'lodash';\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  error: '',\n  isLoading: false,\n  publicWelfare: null,\n  publicWelfareData: []\n};\n\nconst slice = createSlice({\n  name: 'publicWelfare',\n  initialState,\n  reducers: {\n    startLoading(state) {\n      state.isLoading = true;\n    },\n\n    hasError(state, action) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n\n    getPublicWelfareSuccess(state, action) {\n      state.isLoading = false;\n      state.publicWelfareData = action.payload;\n    }\n  }\n});\n\n// Reducer\nexport default slice.reducer;\n\n// Actions\nexport const { hasError } = slice.actions;\n\n// ----------------------------------------------------------------\n\nexport function getPublicWelfareData() {\n  return async (dispatch) => {\n    dispatch(slice.actions.startLoading());\n    try {\n      const response = await axios.get('/Data/PublicWelfareCoordinates/data.geo.json');\n      dispatch(slice.actions.getPublicWelfareSuccess(response.data.points));\n    } catch (error) {\n      dispatch(slice.actions.hasError(error.message));\n    }\n  };\n}","import axios from 'axios';\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  error: '',\n  isLoading: false,\n  type: null,\n  ChinaMapData: []\n};\n\nconst slice = createSlice({\n  name: 'chinaMap',\n  initialState,\n  reducers: {\n    startLoading(state) {\n      state.isLoading = true;\n    },\n\n    hasError(state, action) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n\n    getChinaMapSuccess(state, action) {\n      state.isLoading = false;\n      state.ChinaMapData = action.payload.features;\n      state.type = action.payload.type;\n    }\n  }\n});\n\n// Reducer\nexport default slice.reducer;\n\n// Actions\nexport const { hasError } = slice.actions;\n\n// ----------------------------------------------------------------\n\nexport function getChinaMapData() {\n  return async (dispatch) => {\n    dispatch(slice.actions.startLoading());\n    try {\n      const response = await axios.get('/Map/ChinaData.geo.json');\n      dispatch(slice.actions.getChinaMapSuccess(response.data));\n    } catch (error) {\n      dispatch(slice.actions.hasError(error.message));\n    }\n  };\n}","import { combineReducers } from 'redux';\n// import { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport publicWelfareReducer from './slices/publicWelfare';\nimport ChinaMapReducer from './slices/ChinaMap';\n\n// ----------------------------------------------------------------\n\nconst rootPersistConfig = {\n  key: 'root',\n  storage: storage,\n  keyPrefix: 'redux-',\n  whitelist: ['settings']\n};\n\n// const authPersistConfig = {\n//   key: 'authJwt',\n//   storage: storage,\n//   keyPrefix: 'redux-',\n//   whitelist: ['isAuthenticated']\n// };\n\nconst appReducer = combineReducers({\n  publicWelfare: publicWelfareReducer,\n  ChinaMap: ChinaMapReducer\n});\n\n// Cleans up the states when logoutSuccess is triggered\nconst rootReducer = (state, action) => {\n  if (action.type === 'authJwt/logoutSuccess') {\n    storage.removeItem('persist:root');\n    return appReducer(undefined, action);\n  }\n  return appReducer(state, action);\n};\n\nexport { rootPersistConfig, rootReducer };\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport { rootPersistConfig, rootReducer } from './rootReducer';\n\nconst store = configureStore({\n  reducer: persistReducer(rootPersistConfig, rootReducer),\n  middleware: getDefaultMiddleware({\n    serializableCheck: false,\n    immutableCheck: false\n  })\n});\n\nconst persistor = persistStore(store);\n\nexport { store, persistor };\n","import React, { lazy, Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/lib/integration/react';\nconst App = lazy(() => import('./App'));\n\nReactDOM.render(\n  // <React.StrictMode>\n  <Provider store={store}>\n    <PersistGate loading={<div></div>} persistor={persistor}>\n      <Suspense fallback={<div></div>}>\n        <App />\n      </Suspense>\n    </PersistGate>\n  </Provider>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}